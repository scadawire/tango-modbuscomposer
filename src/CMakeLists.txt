#=============================================================================
#
# file :        CMakeLists.txt
#
# description : File to generate a TANGO device server using cmake.
#
# project :     ModbusComposer
#
#=============================================================================
#                This file is generated by POGO
#        (Program Obviously used to Generate tango Object)
#=============================================================================
#
#
cmake_minimum_required (VERSION 3.18...3.26 FATAL_ERROR)
set(CMAKE_SKIP_RPATH TRUE)

# Build ExpParserTst
#set(_BUILDTST ON)
set(_BUILDTST OFF)

# MAKE_ENV is the path to find the common environment to build the project
#
if (DEFINED ENV{MAKE_ENV})
    set(MAKE_ENV $ENV{MAKE_ENV})
else()
    set(MAKE_ENV /segfs/tango/cppserver/env)
endif()
#
# Project definitions
#
project(ModbusComposer)

#
# optional compiler flags
#
set(CXXFLAGS_USER "-O2 -DEXIT_ON_CONFIGERROR")


#
# Get global information
#
include(${MAKE_ENV}/cmake_tango.opt)

#
# Tango Class list used by project
#

#
# Files for Serial TANGO class
#
set(SERIAL  Serial)
set(SERIAL_PATH  ../../../protocols/SerialLine.git/src)
set(SERIAL_INCLUDE  ../../../protocols/SerialLine.git/src)
set(SERIAL_SRC  ${SERIAL_PATH}/${SERIAL}.cpp ${SERIAL_PATH}/${SERIAL}Class.cpp ${SERIAL_PATH}/${SERIAL}StateMachine.cpp)
#
# Files for Modbus TANGO class
#
set(MODBUS  Modbus)
set(MODBUS_PATH  ../../../protocols/Modbus/src)
set(MODBUS_INCLUDE  ../../../protocols/Modbus/src)
set(MODBUS_SRC  ${MODBUS_PATH}/${MODBUS}.cpp ${MODBUS_PATH}/${MODBUS}Class.cpp ${MODBUS_PATH}/${MODBUS}StateMachine.cpp ${MODBUS_PATH}/ModbusCore.cpp ${MODBUS_PATH}/CacheThread.cpp)
#
# Files for ModbusComposer TANGO class
#
set(MODBUSCOMPOSER  ModbusComposer)
set(MODBUSCOMPOSER_PATH  ./)
set(TESTPARSER_PATH  ../test/)
set(MODBUSCOMPOSER_INCLUDE  ./)
set(MODBUSCOMPOSER_SRC  ${MODBUSCOMPOSER_PATH}/${MODBUSCOMPOSER}.cpp ${MODBUSCOMPOSER_PATH}/${MODBUSCOMPOSER}Class.cpp ${MODBUSCOMPOSER_PATH}/${MODBUSCOMPOSER}StateMachine.cpp ${MODBUSCOMPOSER_PATH}/ExpParser.cpp ${MODBUSCOMPOSER_PATH}/AttributeMap.cpp ${MODBUSCOMPOSER_PATH}/ModbusComposerThread.cpp)

set(TESTPARSER_SRC  ${TESTPARSER_PATH}/ExpParserTst.cpp)

#
# User additional include, link folders/libraries and source files
#
set(USER_INCL_DIR )
set(USER_LIB_DIR )
set(USER_LIBS )
set(USER_SRC_FILES )

#
# Set global info and include directories
#
set(ALL_CLASS_INCLUDE ${SERIAL_INCLUDE} ${MODBUS_INCLUDE} ${MODBUSCOMPOSER_INCLUDE} )
set(SERVER_SRC ${SERIAL_SRC} ${MODBUS_SRC} ${MODBUSCOMPOSER_SRC}  ${USER_SRC_FILES} MultiClassesFactory.cpp main.cpp)
include_directories(${ALL_CLASS_INCLUDE}  ${USER_INCL_DIR} ${TANGO_INCLUDES})

#
# Device Server generation
#
set(SERVER_NAME ModbusComposer)
include(${MAKE_ENV}/cmake_common_target.opt)

if(_BUILDTST)
add_executable(ExParserTst ${TESTPARSER_SRC} ${SERIAL_SRC} ${MODBUS_SRC} ${MODBUSCOMPOSER_SRC})
target_link_libraries(ExParserTst ${USER_LIBS} ${TANGO_LIBS})
endif()
